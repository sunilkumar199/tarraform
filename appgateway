data "azurerm_subnet" "frontend_subnet" {
    name = var.frontend_subnet_name
    resource_group_name = var.vnet_resource_group_name
    virtual_network_name =var.vnet.name
}

locals {
    backend_address_pool_name = "${var.application.gateway.name}--pool"
    frontend_port_name = "${var.application.gateway.name}--feport"
    frontend_ip_configuration_name = "${var.application.gateway.name}--feip"
    http_setting_name = "${var.application.gateway.name}--httprule"
    listener_name = "${var.application.gateway.name}--listener"
    request_routing_rule_name = "${var.application.gateway.name}--rtrule"
    probe_name = "${var.application.gateway.name}--probe"
}

resource "azure_application_gateway" "app" {
    name = var.application_gateway_name
    location = var.location
    capacity = var.capacity
}

sku {
    name = var.sku.name
    tier = var.tier
    capacity = var.capacity
}

gateway_ip_configuration {
    name = "appGatewayIpConfig"
    subnet_id = data.azurerm_subnet.frontend_subnet.id
}

frontend_port {
    name = local.frontend_port_name
    port = var.frontend_port
}

frontend_ip_configuration {
    name = local.frontend_ip_configuration_name
    private_ip_address = var.private_ip_address
    private_ip_address_allocation = var.private_ip_address_allocation
    subnet_id = var.private_ip_address != "" ? data.azurerm_subnet.frontend_subnet.id : null
}

backend_address_pool {
    name = local.backend.backend_address_pool_name
    fqdns = var.backend_pool_gqdn
    ip_addresses = var.backend_ip_addresses
}

backend_http_settings {
    name = local.http_settings_name
    cookie_based_affinity = var.cookie_based_affinity
    path = var.backend_path
    port = var.backend_port
    probe_name = local.probe_name
    protocol = var.backend_protocol
    request_timeout = var.backend_request_timeout
    pick_host_name_from_backend_address = var.pick_host_name_from_backend_address

}

http_listener{
    name = local.listener_name
    frontend_ip_configuration_name = local.frontend_ip_configuration_name
}

http_listener {
    name = local.listener_name
    frontend_ip_configuration_name = local.frontend_ip_configuration_name
    frontend_port_name = local.frontend_port_name
    protocal = var.listenet_protocal
    host_name = var.listener_host_name
    ssl_certificate_name = var.ssl_certificate_name

}

probe {
    name = local.probe_name
    interval = var.prove_interval
    protocol = var.probe_protocal
    path = var.probe_path
    timeout = var.probe_timeout
    unhealthy_threshold = var.probe_unhealthy_threshold
    pick_host_name_from_backend_http_settings = var.pick_host_name_from_backend_http_settings

}

request_routung_rule {
    name = local.request_routing_rule_name
    rule_type = "Basic"
    http_listener_name = local.listener_name
    backend_address_pool_name = local.backend_address_pool_name
    backend_http_settings_name = local.http_settings_name
    pick_host_name_from_backend_http_settings = var.pick_host_name_from_backend_http_settings 
}

request_routing_rule {
    name = local.request_routing_rule_name
    rule_type = "Basic"
    http_listener_name = local.listener_name
    backend_address_pool_name = local.backend_address_pool_name
    backend_http_settings_name = local.http_settings_name

}

ssl_certificate {
    name = var.ssl.certificate.name
    data = var.certoficate.address_prefixes
    password = var.certificate_password
}

ssl_policy {
    policy_type = "Custom"
    min_protocol_version = "TLSv1_2"
    cipher_suits = [""]
}


